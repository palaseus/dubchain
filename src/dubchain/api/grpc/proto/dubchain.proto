syntax = "proto3";

package dubchain;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

// Core blockchain types
message Block {
    string hash = 1;
    string previous_hash = 2;
    google.protobuf.Timestamp timestamp = 3;
    int64 height = 4;
    repeated Transaction transactions = 5;
    string merkle_root = 6;
    int64 nonce = 7;
    int64 difficulty = 8;
    string validator = 9;
    int64 gas_used = 10;
    int64 gas_limit = 11;
    string extra_data = 12;
}

message Transaction {
    string hash = 1;
    string from_address = 2;
    string to_address = 3;
    string value = 4; // Using string for precision
    int64 gas_price = 5;
    int64 gas_limit = 6;
    int64 nonce = 7;
    string data = 8;
    string signature = 9;
    google.protobuf.Timestamp timestamp = 10;
    TransactionStatus status = 11;
    string block_hash = 12;
    int64 block_number = 13;
    int64 transaction_index = 14;
}

enum TransactionStatus {
    TRANSACTION_STATUS_UNKNOWN = 0;
    TRANSACTION_STATUS_PENDING = 1;
    TRANSACTION_STATUS_CONFIRMED = 2;
    TRANSACTION_STATUS_FAILED = 3;
    TRANSACTION_STATUS_DROPPED = 4;
}

message Account {
    string address = 1;
    string balance = 2; // Using string for precision
    int64 nonce = 3;
    string code_hash = 4;
    map<string, string> storage = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

message Contract {
    string address = 1;
    string bytecode = 2;
    string abi = 3;
    string creator = 4;
    google.protobuf.Timestamp created_at = 5;
    repeated ContractEvent events = 6;
    map<string, string> state = 7;
}

message ContractEvent {
    string event_name = 1;
    map<string, string> parameters = 2;
    google.protobuf.Timestamp timestamp = 3;
    string transaction_hash = 4;
    int64 block_number = 5;
    int64 log_index = 6;
}

// Wallet types
message Wallet {
    string wallet_id = 1;
    string name = 2;
    repeated string addresses = 3;
    WalletType type = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
    map<string, string> metadata = 7;
}

enum WalletType {
    WALLET_TYPE_UNKNOWN = 0;
    WALLET_TYPE_HD = 1;
    WALLET_TYPE_MULTISIG = 2;
    WALLET_TYPE_HARDWARE = 3;
}

// Bridge types
message BridgeTransfer {
    string transfer_id = 1;
    string source_chain = 2;
    string target_chain = 3;
    string source_asset = 4;
    string target_asset = 5;
    string amount = 6; // Using string for precision
    string sender = 7;
    string receiver = 8;
    BridgeTransferStatus status = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
    string source_tx_hash = 12;
    string target_tx_hash = 13;
    map<string, string> metadata = 14;
}

enum BridgeTransferStatus {
    BRIDGE_TRANSFER_STATUS_UNKNOWN = 0;
    BRIDGE_TRANSFER_STATUS_PENDING = 1;
    BRIDGE_TRANSFER_STATUS_CONFIRMED = 2;
    BRIDGE_TRANSFER_STATUS_COMPLETED = 3;
    BRIDGE_TRANSFER_STATUS_FAILED = 4;
    BRIDGE_TRANSFER_STATUS_CANCELLED = 5;
}

// Sharding types
message Shard {
    int32 shard_id = 1;
    repeated string validators = 2;
    int64 block_height = 3;
    string state_root = 4;
    ShardStatus status = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
    map<string, string> metadata = 8;
}

enum ShardStatus {
    SHARD_STATUS_UNKNOWN = 0;
    SHARD_STATUS_ACTIVE = 1;
    SHARD_STATUS_INACTIVE = 2;
    SHARD_STATUS_SYNCING = 3;
    SHARD_STATUS_ERROR = 4;
}

// Consensus types
message Validator {
    string address = 1;
    string public_key = 2;
    string stake = 3; // Using string for precision
    ValidatorStatus status = 4;
    int64 commission_rate = 5; // Basis points
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
    map<string, string> metadata = 8;
}

enum ValidatorStatus {
    VALIDATOR_STATUS_UNKNOWN = 0;
    VALIDATOR_STATUS_ACTIVE = 1;
    VALIDATOR_STATUS_INACTIVE = 2;
    VALIDATOR_STATUS_JAILED = 3;
    VALIDATOR_STATUS_UNBONDING = 4;
}

// Governance types
message Proposal {
    string proposal_id = 1;
    string title = 2;
    string description = 3;
    ProposalType type = 4;
    ProposalStatus status = 5;
    string proposer = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp voting_start = 8;
    google.protobuf.Timestamp voting_end = 9;
    string yes_votes = 10; // Using string for precision
    string no_votes = 11; // Using string for precision
    string abstain_votes = 12; // Using string for precision
    map<string, string> metadata = 13;
}

enum ProposalType {
    PROPOSAL_TYPE_UNKNOWN = 0;
    PROPOSAL_TYPE_TEXT = 1;
    PROPOSAL_TYPE_PARAMETER_CHANGE = 2;
    PROPOSAL_TYPE_TREASURY_SPENDING = 3;
    PROPOSAL_TYPE_UPGRADE = 4;
}

enum ProposalStatus {
    PROPOSAL_STATUS_UNKNOWN = 0;
    PROPOSAL_STATUS_DEPOSIT_PERIOD = 1;
    PROPOSAL_STATUS_VOTING_PERIOD = 2;
    PROPOSAL_STATUS_PASSED = 3;
    PROPOSAL_STATUS_REJECTED = 4;
    PROPOSAL_STATUS_FAILED = 5;
}

// Network types
message Peer {
    string peer_id = 1;
    string address = 2;
    int32 port = 3;
    PeerStatus status = 4;
    google.protobuf.Timestamp last_seen = 5;
    map<string, string> capabilities = 6;
    map<string, string> metadata = 7;
}

enum PeerStatus {
    PEER_STATUS_UNKNOWN = 0;
    PEER_STATUS_CONNECTING = 1;
    PEER_STATUS_CONNECTED = 2;
    PEER_STATUS_DISCONNECTED = 3;
    PEER_STATUS_FAILED = 4;
}

message NodeInfo {
    string node_id = 1;
    string version = 2;
    string network_id = 3;
    int64 block_height = 4;
    string chain_id = 5;
    repeated string capabilities = 6;
    map<string, string> metadata = 7;
}

// Performance and metrics types
message NetworkStats {
    int64 total_peers = 1;
    int64 active_peers = 2;
    int64 total_transactions = 3;
    int64 pending_transactions = 4;
    int64 total_blocks = 5;
    string network_hash_rate = 6; // Using string for precision
    int64 average_block_time = 7;
    google.protobuf.Timestamp timestamp = 8;
}

message PerformanceMetrics {
    double cpu_usage = 1;
    double memory_usage = 2;
    double disk_usage = 3;
    int64 network_bandwidth = 4;
    int64 transaction_throughput = 5;
    int64 block_processing_time = 6;
    google.protobuf.Timestamp timestamp = 7;
}

// Request/Response types
message GetBlockRequest {
    oneof identifier {
        string hash = 1;
        int64 height = 2;
    }
}

message GetBlockResponse {
    Block block = 1;
}

message GetBlocksRequest {
    int32 limit = 1;
    int32 offset = 2;
    int64 from_height = 3;
    int64 to_height = 4;
}

message GetBlocksResponse {
    repeated Block blocks = 1;
    int32 total_count = 2;
}

message GetTransactionRequest {
    string hash = 1;
}

message GetTransactionResponse {
    Transaction transaction = 1;
}

message GetAccountRequest {
    string address = 1;
}

message GetAccountResponse {
    Account account = 1;
}

message GetContractRequest {
    string address = 1;
}

message GetContractResponse {
    Contract contract = 1;
}

message CreateWalletRequest {
    string name = 1;
    string password = 2;
    WalletType type = 3;
    map<string, string> metadata = 4;
}

message CreateWalletResponse {
    string wallet_id = 1;
    repeated string addresses = 2;
}

message CreateTransactionRequest {
    string from_address = 1;
    string to_address = 2;
    string value = 3; // Using string for precision
    int64 gas_price = 4;
    int64 gas_limit = 5;
    string data = 6;
    string private_key = 7; // In production, this should be handled securely
}

message CreateTransactionResponse {
    string transaction_hash = 1;
}

message DeployContractRequest {
    string bytecode = 1;
    string abi = 2;
    repeated string constructor_args = 3;
    string from_address = 4;
    int64 gas_price = 5;
    int64 gas_limit = 6;
    string private_key = 7; // In production, this should be handled securely
}

message DeployContractResponse {
    string contract_address = 1;
    string transaction_hash = 2;
}

message CallContractRequest {
    string contract_address = 1;
    string function_name = 2;
    repeated string args = 3;
    string from_address = 4;
    int64 gas_price = 5;
    int64 gas_limit = 6;
    string private_key = 7; // In production, this should be handled securely
}

message CallContractResponse {
    string result = 1;
    string transaction_hash = 2;
}

message CreateBridgeTransferRequest {
    string source_chain = 1;
    string target_chain = 2;
    string source_asset = 3;
    string target_asset = 4;
    string amount = 5; // Using string for precision
    string receiver = 6;
    string sender = 7;
    map<string, string> metadata = 8;
}

message CreateBridgeTransferResponse {
    string transfer_id = 1;
}

message GetBridgeTransferRequest {
    string transfer_id = 1;
}

message GetBridgeTransferResponse {
    BridgeTransfer transfer = 1;
}

message CreateProposalRequest {
    string title = 1;
    string description = 2;
    ProposalType type = 3;
    string proposer = 4;
    map<string, string> metadata = 5;
}

message CreateProposalResponse {
    string proposal_id = 1;
}

message VoteRequest {
    string proposal_id = 1;
    string voter = 2;
    VoteOption option = 3;
    string reason = 4;
}

message VoteResponse {
    bool success = 1;
}

enum VoteOption {
    VOTE_OPTION_UNKNOWN = 0;
    VOTE_OPTION_YES = 1;
    VOTE_OPTION_NO = 2;
    VOTE_OPTION_ABSTAIN = 3;
}

message GetProposalRequest {
    string proposal_id = 1;
}

message GetProposalResponse {
    Proposal proposal = 1;
}

message GetNetworkStatsRequest {
    // Empty request
}

message GetNetworkStatsResponse {
    NetworkStats stats = 1;
}

message GetPerformanceMetricsRequest {
    // Empty request
}

message GetPerformanceMetricsResponse {
    PerformanceMetrics metrics = 1;
}

// Streaming types
message BlockStreamRequest {
    int32 shard_id = 1; // Optional: filter by shard
}

message TransactionStreamRequest {
    string from_address = 1; // Optional: filter by sender
    string to_address = 2; // Optional: filter by receiver
    int32 shard_id = 3; // Optional: filter by shard
}

message ContractEventStreamRequest {
    string contract_address = 1;
    string event_name = 2; // Optional: filter by event name
}

message BridgeTransferStreamRequest {
    string transfer_id = 1; // Optional: filter by specific transfer
    string status = 2; // Optional: filter by status
}

message GovernanceStreamRequest {
    string proposal_id = 1; // Optional: filter by specific proposal
}

// Service definitions
service BlockchainService {
    // Block operations
    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
    rpc GetBlocks(GetBlocksRequest) returns (GetBlocksResponse);
    rpc StreamBlocks(BlockStreamRequest) returns (stream Block);
    
    // Transaction operations
    rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
    rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse);
    rpc StreamTransactions(TransactionStreamRequest) returns (stream Transaction);
    
    // Account operations
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);
    
    // Contract operations
    rpc GetContract(GetContractRequest) returns (GetContractResponse);
    rpc DeployContract(DeployContractRequest) returns (DeployContractResponse);
    rpc CallContract(CallContractRequest) returns (CallContractResponse);
    rpc StreamContractEvents(ContractEventStreamRequest) returns (stream ContractEvent);
}

service WalletService {
    // Wallet operations
    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
    rpc GetWallet(google.protobuf.Empty) returns (Wallet);
    rpc ListWallets(google.protobuf.Empty) returns (stream Wallet);
}

service BridgeService {
    // Bridge operations
    rpc CreateBridgeTransfer(CreateBridgeTransferRequest) returns (CreateBridgeTransferResponse);
    rpc GetBridgeTransfer(GetBridgeTransferRequest) returns (GetBridgeTransferResponse);
    rpc StreamBridgeTransfers(BridgeTransferStreamRequest) returns (stream BridgeTransfer);
}

service GovernanceService {
    // Governance operations
    rpc CreateProposal(CreateProposalRequest) returns (CreateProposalResponse);
    rpc GetProposal(GetProposalRequest) returns (GetProposalResponse);
    rpc Vote(VoteRequest) returns (VoteResponse);
    rpc StreamGovernanceUpdates(GovernanceStreamRequest) returns (stream Proposal);
}

service NetworkService {
    // Network operations
    rpc GetNetworkStats(GetNetworkStatsRequest) returns (GetNetworkStatsResponse);
    rpc GetPerformanceMetrics(GetPerformanceMetricsRequest) returns (GetPerformanceMetricsResponse);
    rpc GetNodeInfo(google.protobuf.Empty) returns (NodeInfo);
    rpc ListPeers(google.protobuf.Empty) returns (stream Peer);
}

service ConsensusService {
    // Consensus operations
    rpc GetValidators(google.protobuf.Empty) returns (stream Validator);
    rpc GetShards(google.protobuf.Empty) returns (stream Shard);
    rpc GetShard(int32) returns (Shard);
}
