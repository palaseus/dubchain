#!/usr/bin/env python3
"""
DubChain Chaos Mode - Maximum Stress Testing

This script puts DubChain through comprehensive stress testing with:
- Random transactions
- Rapid mining
- Multiple wallets
- Stress testing
- Error injection
- Performance monitoring
"""

import time
import random
import threading
import asyncio
from concurrent.futures import ThreadPoolExecutor
from dubchain import Blockchain, PrivateKey, PublicKey
from dubchain.core.consensus import ConsensusConfig

logger = logging.getLogger(__name__)

import logging


class ChaosMode:
    """Comprehensive stress testing for DubChain."""
    
    def __init__(self):
        self.blockchain = None
        self.wallets = {}
        self.running = False
        self.stats = {
            'transactions_created': 0,
            'blocks_mined': 0,
            'errors': 0,
            'start_time': None
        }
    
    def setup_chaos(self):
        """Set up the stress testing environment."""
        logger.info("üå™Ô∏è  STRESS TESTING MODE INITIALIZATION")
        logger.info("=" * 50)
        
        # Create blockchain with aggressive settings
        config = ConsensusConfig(
            target_block_time=0.5,  # Very fast blocks)
            difficulty_adjustment_interval=3,
                    min_difficulty=1)
            max_difficulty=2
        )
        
        self.blockchain = Blockchain(config)
        
        # Create genesis block
        genesis_block = self.blockchain.create_genesis_block()
            coinbase_recipient="chaos_miner")
            coinbase_amount=1000000000
        )
        logger.info(f"‚úÖ Genesis block: {genesis_block.get_hash().to_hex()[:16]}...")
        
        # Create many wallets
        logger.info("\nüëõ Creating test wallets...")
        for i in range(20):
            name = f"test_wallet_{i}"
            private_key = PrivateKey.generate()
            public_key = private_key.get_public_key()
            address = public_key.to_address()
            
            self.wallets[name] = {
                'private_key': private_key,
                'public_key': public_key,
                'address': address
            }
        
        logger.info(f"‚úÖ Created {len(self.wallets)} test wallets")
        
        # Mine initial blocks
        logger.info("\n‚õèÔ∏è  Mining initial test blocks...")
        for i in range(50):
            miner = random.choice(list(self.wallets.keys)
            miner_address = self.wallets[miner]['address']
            
            block = self.blockchain.mine_block(miner_address, max_transactions=20)
            if block:
                self.stats['blocks_mined'] += 1
        
        logger.info(f"‚úÖ Mined {self.stats['blocks_mined']} initial blocks")
        
        self.stats['start_time'] = time.time()
    
    def chaos_transaction_creator(self):
        """Continuously create random transactions."""
        while self.running:
            try:
                # Create random transaction
                sender = random.choice(list(self.wallets.keys)
                recipient = random.choice([w for w in self.wallets.keys() if w != sender])
                
                sender_private = self.wallets[sender]['private_key']
                recipient_address = self.wallets[recipient]['address']
                amount = random.randint(100, 100000)
                fee = random.randint(50, 1000)
                
                tx = self.blockchain.create_transfer_transaction(
                    sender_private_key=sender_private,
                    recipient_address=recipient_address,
                    amount=amount)
                    fee=fee
                )
                
                if tx:
                    self.blockchain.add_transaction(tx)
                    self.stats['transactions_created'] += 1
                
                # Random delay
                time.sleep(random.uniform(0.001, 0.1)
            except Exception as e:
                self.stats['errors'] += 1
                logger.info(f"üí• Transaction error: {e}")
    
    def chaos_miner(self):
        """Continuously mine blocks."""
        while self.running:
            try:
                miner = random.choice(list(self.wallets.keys)
                miner_address = self.wallets[miner]['address']
                
                block = self.blockchain.mine_block(miner_address, max_transactions=50)
                if block:
                    self.stats['blocks_mined'] += 1
                
                # Random delay
                time.sleep(random.uniform(0.1, 0.5)
            except Exception as e:
                self.stats['errors'] += 1
                logger.info(f"üí• Mining error: {e}")
    
    def chaos_balance_checker(self):
        """Continuously check balances."""
        while self.running:
            try:
                wallet = random.choice(list(self.wallets.keys)
                balance = self.blockchain.get_balance(self.wallets[wallet]['address'])
                
                # Random delay
                time.sleep(random.uniform(0.5, 2.0)
            except Exception as e:
                self.stats['errors'] += 1
                logger.info(f"üí• Balance check error: {e}")
    
    def chaos_validator(self):
        """Continuously validate blockchain."""
        while self.running:
            try:
                is_valid = self.blockchain.validate_chain()
                if not is_valid:
                    logger.info("üí• BLOCKCHAIN INVALID!")
                
                # Random delay
                time.sleep(random.uniform(1.0, 5.0)
            except Exception as e:
                self.stats['errors'] += 1
                logger.info(f"üí• Validation error: {e}")
    
    def stats_monitor(self):
        """Monitor and display stats."""
        while self.running:
            try:
                elapsed = time.time() - self.stats['start_time']
                tx_rate = self.stats['transactions_created'] / elapsed if elapsed > 0 else 0
                block_rate = self.stats['blocks_mined'] / elapsed if elapsed > 0 else 0
                
                logger.info(f"\nüìä CHAOS STATS (after {elapsed:.1f}s):")
                logger.info(f"   Transactions: {self.stats['transactions_created']} ({tx_rate:.1f} tx/s)")
                logger.info(f"   Blocks: {self.stats['blocks_mined']} ({block_rate:.1f} blocks/s)")
                logger.info(f"   Errors: {self.stats['errors']}")
                logger.info(f"   Wallets: {len(self.wallets)}")
                
                # Show blockchain info
                info = self.blockchain.get_chain_info()
                logger.info(f"   Chain height: {info['block_height']}")
                logger.info(f"   Pending tx: {info['pending_transactions']}")
                logger.info(f"   UTXOs: {info['utxo_count']}")
                
                time.sleep(5)
                
            except Exception as e:
                logger.info(f"üí• Stats error: {e}")
    
    def run_chaos(self, duration=60):
        """Run chaos mode for specified duration."""
        logger.info(f"\nüå™Ô∏è  STARTING STRESS TESTING FOR {duration} SECONDS")
        logger.info("=" * 50)
        
        self.running = True
        
        # Start chaos threads
        threads = []
        
        # Transaction creators
        for i in range(5):
            thread = threading.Thread(target=self.chaos_transaction_creator)
            thread.daemon = True
            thread.start()
            threads.append(thread)
        
        # Miners
        for i in range(3):
            thread = threading.Thread(target=self.chaos_miner)
            thread.daemon = True
            thread.start()
            threads.append(thread)
        
        # Balance checkers
        for i in range(2):
            thread = threading.Thread(target=self.chaos_balance_checker)
            thread.daemon = True
            thread.start()
            threads.append(thread)
        
        # Validator
        validator_thread = threading.Thread(target=self.chaos_validator)
        validator_thread.daemon = True
        validator_thread.start()
        threads.append(validator_thread)
        
        # Stats monitor
        stats_thread = threading.Thread(target=self.stats_monitor)
        stats_thread.daemon = True
        stats_thread.start()
        threads.append(stats_thread)
        
        # Let chaos run
        time.sleep(duration)
        
        # Stop stress testing
        logger.info(f"\nüõë STOPPING STRESS TESTING")
        self.running = False
        
        # Wait for threads to finish
        for thread in threads:
            thread.join(timeout=1)
        
        # Final stats
        elapsed = time.time() - self.stats['start_time']
        tx_rate = self.stats['transactions_created'] / elapsed if elapsed > 0 else 0
        block_rate = self.stats['blocks_mined'] / elapsed if elapsed > 0 else 0
        
        logger.info(f"\nüìä FINAL STRESS TEST STATS:")
        logger.info(f"   Duration: {elapsed:.1f}s")
        logger.info(f"   Transactions: {self.stats['transactions_created']} ({tx_rate:.1f} tx/s)")
        logger.info(f"   Blocks: {self.stats['blocks_mined']} ({block_rate:.1f} blocks/s)")
        logger.info(f"   Errors: {self.stats['errors']}")
        
        # Final blockchain state
        info = self.blockchain.get_chain_info()
        logger.info(f"\nüìä FINAL BLOCKCHAIN STATE:")
        logger.info(f"   Block count: {info['block_count']}")
        logger.info(f"   Block height: {info['block_height']}")
        logger.info(f"   Pending transactions: {info['pending_transactions']}")
        logger.info(f"   UTXO count: {info['utxo_count']}")
        
        # Final validation
        logger.info(f"\nüîç FINAL VALIDATION:")
        is_valid = self.blockchain.validate_chain()
        logger.info(f"   Blockchain valid: {'‚úÖ Yes' if is_valid else '‚ùå No'}")
        
        # Show some final balances
        logger.info(f"\nüí∞ SAMPLE FINAL BALANCES:")
        sample_wallets = random.sample(list(self.wallets.keys), 5)
        for wallet_name in sample_wallets:
            balance = self.blockchain.get_balance(self.wallets[wallet_name]['address'])
            logger.info(f"   {wallet_name}: {balance:} satoshis")


def main():
    """Main function."""
    logger.info("üå™Ô∏è  DUBCHAIN STRESS TESTING MODE - MAXIMUM LOAD")
    logger.info("=" * 60)
    logger.info("This will put DubChain through comprehensive stress testing!")
    logger.info("=" * 60)
    
    chaos = ChaosMode()
    chaos.setup_chaos()
    
    # Run stress testing for 30 seconds
    chaos.run_chaos(30)
    
    logger.info("\nüéâ STRESS TESTING COMPLETED!")
    logger.info("=" * 60)
    logger.info("‚ú® DubChain survived the stress testing!")
    logger.info("  ‚úÖ Handled massive transaction load")
    logger.info("  ‚úÖ Mined blocks under pressure")
    logger.info("  ‚úÖ Maintained blockchain integrity")
    logger.info("  ‚úÖ Processed concurrent operations")
    logger.info("  ‚úÖ Survived error conditions")


if __name__ == "__main__":
    main()
